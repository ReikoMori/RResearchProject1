install.packages("devtools")
library(devtools)
find_rtools()
X <-c("a","b","c","d")
for(i in 1:4){print(x[i])}
x<-c("a","b","c","d")
for(i in 1:4) {print x[i]}
for(i in 1:4) {
print(x[i])
}
for(i in seq_along(x)) {
print(x[i])
}
for(letter in x) {
print(letter)
}
for(i in 1:4) print(x[i])
for(i in 1:5) {
print(x[i])
}
x<-matric(1:6, 2, 3)
x<- matrix(1:6, 2,3)
print(x)
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
}
complete.R <- function(directory, id = 1:332) {
id <- as.integer(id)
directory <- as.character(directory)
j <- 0
full.data <- data.frame(id= rep(NA, length(id)), nobs = rep(NA,length(id)))
for (i in id) {
if (i<10) {
p <- paste("00", i, sep="")
}else if (10 <= 1 && 1 <100){
p <- paste(0, i, sep="")
}else {
p <-as.character(i)
}
j <- j+1
data <- read.csv(paste(p, ".csv", sep=""))
good <- complete.cases(data)
nobs <- nrow(data[good,])
fulldata[j,]<- c(i, nobs)
}
full.data
}
submit()
swirl()
library("swirl")
swirl()
install_from_swirl("R Programming")
install_from_swirl("R Programming")
swirl()
swirl()
TRUE == TRUE
(FALSE == TRUE) == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
help
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && C(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(c(ints>7))
help
which(ints>7)
any(ints<0)
all(ints==0)
all(ints>0)
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <-flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mate <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6,))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
sapplu(flags,class)
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flag$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,
| flags$landmass, mean)
tapply(flags$animate,flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass, summary)
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
print(environment())
print(parent.environment())
print(parent.env(environment))
env <- environment()
print(parent.environment(env))
print(environment())
environment()
environment
evn <- environment()
print(parent.env(evn))
set <-function(y) {
x <<- y
m <<- NULL
}
## caching the inverse of a matrix
## the first function "makeCacheMatrix" creates a special "matrix" which is really a list containing a function that:
#1.  sets the value of the matrix
#2.  gets the value of the matrix
#3.  sets the value of the inverse
#4.  gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
j <- NULL
set <- function(y) {
x <<- y
j <<- NULL
}
get <- function() x
setinverse <- function(solve) j <<- solve
getinverse <- function() j
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## The 'cacheSolve' function calculates the inverse of the special "matrix" created by `makeCacheMatrix` above.
#It first checks if the inverse has already been calculated (and the matrix has not changed). If so, it should retrieve the inverse from the cache.
#If not, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinv function
cachesolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
j <- x$getinverse()
if(!is.null(j)) {
message("getting cached data")
return(j)
}
data <- x$get()
j <- solve(data, ...)
x$setinverse(j)
i
}
c(1,-1/4)
z=rbind(c(1,,2,3),c(3,2,1))
z=rbind(c(1,2,3),c(3,2,1))
m = makeCacheMatrix(z)
m$get()
cacheSolve(m)
cachesolve(m)
cacheSolve(m)
x=rbind(c(1.066667, 0.2666667), c(0.2666667, 1.0666667))
x
cacheSolve(m)
cachesolve(m)
myMatrix <- rbind(c(1,2),(2,1))
myMatrix = rbind(c(1,2),(2,1))
my Matrix = rbind(c(2,1),c(1,2)
my Matrix = rbind(c(2,1),c(1,2))
myMatrix = rbind(c(2,1),c(1,2))
myMatrix
example <- makeCacheMatrix(myMatrix)
example
## caching the inverse of a matrix
## the first function "makeCacheMatrix" creates a special "matrix" which is really a list containing a function that:
#1.  sets the value of the matrix
#2.  gets the value of the matrix
#3.  sets the value of the inverse
#4.  gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# in stores the cached inverse matrix
in <- NULL
set <- function(y) {
x <<- y
in <<- NULL
}
get <- function() x
setinverse <- function(solve) in <<- inverse
getinverse <- function() in
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## 'cacheSolve'  returns the inverse of the matrix created above.
#It first checks if the inverse has already been calculated. If so, it should retrieve the inverse from the cache.
#If not, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinverse function
cacheSolve <- function(x, ...) {
in <- x$getinverse()
# If the inverse is already calculated, return it
if(!is.null(in)) {
message("getting cached data")
return(in)
}
# If the inverse is not in the cache, calculate it
data <- x$get()
j <- solve(data, ...)
# Cache the inverse
x$setinverse(in)
# Return it
in
}
## caching the inverse of a matrix
## the first function "makeCacheMatrix" creates a special "matrix" which is really a list containing a function that:
#1.  sets the value of the matrix
#2.  gets the value of the matrix
#3.  sets the value of the inverse
#4.  gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# in stores the cached inverse matrix
in <- NULL
set <- function(y) {
x <<- y
in <<- NULL
}
get <- function() x
setinverse <- function(solve) in <<- solve
getinverse <- function() in
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## 'cacheSolve'  returns the inverse of the matrix created above.
#It first checks if the inverse has already been calculated. If so, it should retrieve the inverse from the cache.
#If not, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinverse function
cacheSolve <- function(x, ...) {
in <- x$getinverse()
# If the inverse is already calculated, return it
if(!is.null(in)) {
message("getting cached data")
return(in)
}
# If the inverse is not in the cache, calculate it
data <- x$get()
j <- solve(data, ...)
# Cache the inverse
x$setinverse(in)
# Return it
in
}
## caching the inverse of a matrix
## the first function "makeCacheMatrix" creates a special "matrix" which is really a list containing a function that:
#1.  sets the value of the matrix
#2.  gets the value of the matrix
#3.  sets the value of the inverse
#4.  gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# in stores the cached inverse matrix
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- solve
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## 'cacheSolve'  returns the inverse of the matrix created above.
#It first checks if the inverse has already been calculated. If so, it should retrieve the inverse from the cache.
#If not, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinverse function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
# If the inverse is already calculated, return it
if(!is.null(i)) {
message("getting cached data")
return(i)
}
# If the inverse is not in the cache, calculate it
data <- x$get()
j <- solve(data, ...)
# Cache the inverse
x$setinverse(i)
# Return inverse
i
}
myMatrix = rbind(c(2,1),c(1,2))
makeCacheMatric(myMatrix)
makeCacheMatrix(myMatrix)
## caching the inverse of a matrix
## the first function "makeCacheMatrix" creates a special "matrix" which is really a list containing a function that:
#1.  sets the value of the matrix
#2.  gets the value of the matrix
#3.  sets the value of the inverse
#4.  gets the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# in stores the cached inverse matrix
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(solve) i <<- inverse
getinverse <- function() i
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## 'cacheSolve'  returns the inverse of the matrix created above.
#It first checks if the inverse has already been calculated. If so, it should retrieve the inverse from the cache.
#If not, it calculates the inverse of the data and sets the value of the inverse in the cache via the setinverse function
cacheSolve <- function(x, ...) {
i <- x$getinverse()
# If the inverse is already calculated, return it
if(!is.null(i)) {
message("getting cached data")
return(i)
}
# If the inverse is not in the cache, calculate it
data <- x$get()
j <- solve(data, ...)
# Cache the inverse
x$setinverse(i)
# Return inverse
i
}
myMatrix = rbind(c(2,1),c(1,2))
makeCacheMatrix(myMatrix)
cacheSolve(myMatrix)
rm(list = ls())
library(ggplot2)
library(plyr)
unzip(zipfile="repdata-data-activity.zip")
data <- read.csv("activity.csv", sep=",", na.strings="NA", colClasses =c("numeric","Date","numeric"))
setwd("C:/Users/Axelle/Documents/R/RD Project 1")
# Loading and pre-processing the data
unzip(zipfile="repdata-data-activity.zip")
data <- read.csv("activity.csv", sep=",", na.strings="NA", colClasses =c("numeric","Date","numeric"))
daily_steps <- aggregate(steps~date, data=data, FUN=sum, na.rm=T)
## A.2. Histogram of steps per day:
tot_steps <- tapply(data$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(tot_steps, binwidth=1000, xlab="number of steps", ylab = "Frequency", main="Total number of daily steps",col="hotpink4")+ theme(legend.position="none")
## A.3. Mean and Median of total number of steps/day
mean_steps <- round(mean(daily_steps$steps), 2)
#[1] 10766.19
median_steps <- quantile(x = daily_steps$steps, probs = 0.5) #10765
steps_int <-aggregate(data$steps ~ data$interval, FUN=mean, na.rm=T)
colnames(steps_int) <- c("Interval","Mean")
### Create time series plot from above calculations
plot(steps_int$Interval, steps_int$Mean, type="l", col="darkred", lwd=2, xlab="time interval", ylab="average number of steps", main="Time Series Plot")
##B.2. Find the interval with the maximum number of steps:
steps_int[which.max(steps_int$Mean),]
#Interval 835, Mean 206.1698
#C. Inputing Missing Values
##C.1. Find total number of missing values in dataset
missing_values <- is.na(data$steps)
nbr_missing <-sum(as.numeric(missing_values))
nbr_missing
# [1] 2304
##C.2. Devise a strategy for filling in missing values
### The insertion strategy will consist of replacing the missing value by the mean value of steps for its interval
##C.3. Fillin in missing values
### Create a new data set
data2 <- data
### Again, find the means of steps for each interval
steps_int <- aggregate(data$steps ~ data$interval, data, FUN=mean, na.rm=T)
colnames(steps_int) <- c("Interval","Mean")
###Plug in the new values
int_mean <-tapply(data$steps, data$interval,mean, na.rm=TRUE)
for (i in which(is.na(data2)))
{
data2[i,1] <- int_mean[((i-1)%%288)+1]
}
###Check that the number of NA = 0
missing_values2 <- is.na(data2$steps)
nbr_missing2 <-sum(as.numeric(missing_values2))
nbr_missing2
#[1] 0
##C.4. New histogram, mean, and median of total steps/day
###New Total of steps per day
daily_steps2 <- aggregate(steps~date, data=data2, FUN=sum, na.rm=T)
### new mean and median
mean_steps2 <- round(mean(daily_steps2$steps), 2)
#[1] 10766.19
median_steps2 <- quantile(x = daily_steps2$steps, probs = 0.5)
# 10766.19
###New histogram
tot_steps2 <- tapply(data2$steps, data$date, FUN=sum, na.rm=TRUE)
qplot(tot_steps2, binwidth=1000, xlab="number of steps", ylab = "Frequency", main="Total number of daily steps, w/o NAs",col="hotpink4")+ theme(legend.position="none")
#D. Are there differences between weekdays and weekends?
##D.1. Create a new factor variable indicating day type
data2<- data.frame(date=data2$date, weekday=weekdays(data2$date),steps=data2$steps, interval=data2$interval)
data2<-cbind(data2,type_day=ifelse(data2$weekday=="Saturday"|data2$weekday=="Sunday","WE","WD"))
##D.2. Create a time series plot for weekends and weekdays
ave_type <- ddply(data2, .(interval,type_day), summarize, steps = mean(steps, na.rm=TRUE))
ggplot(data=ave_type, aes(x=interval, y=steps, group=type_day)) + geom_line(aes(color=type_day))+ facet_wrap(~ type_day, nrow=2)
knit2html("PA1_template.Rmd")
install.packages("knitr")
library(knitr)
knit2html("PA1_template.Rmd")
setwd("C:/Users/Axelle/Documents/R/RD Project 1/RResearchProject1")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
